%{
	#include "y.tab.h"
	#include <stdlib.h>
	#include <stdio.h>

	void yyerror(char *);
	extern int yylineno;
%}
RANDEDGE \$\P
RANDVERT \#\P
SPACE [ \t]+
NEWLINE [\n]
COMMENT [/]+.*
DIGIT [0-9]
LOWERCASE [a-z]
UPPERCASE [A-Z]
LPARAN \(
RPARAN \)
LBRACKETS \{
RBRACKETS \}
LSQR \[
RSQL \]
SEMICOLON \;
COMMA \,
DOT \.
COLON \:
ASSIGNMENT =
COMPARISON ==
GREATER >
LESS <
GREATEREQUAL >=
LESSEQUAL <=
NOTEQUAL !=
NOT !
MULTIPLICATION \*
DIVISION \:\:
SUBTRACTION \-
ADDITION \+
CONCATENATION \&
ALTERNATION \|
REPETITION \^
HASH \#
DOLAR \$
OROR \|\|
ANDAND \&\&
STRCONCAT \~
IFSTM If
ELSE Else
BOOLEAN True|False
FOR For
WHILE While
STRING \"([^\\\"]|\\\"|\\\n|\\\\)*\"
ALPHANUMERIC ({LOWERCASE}|{UPPERCASE}|{DIGIT})
VARIABLE {LOWERCASE}{ALPHANUMERIC}*
PROPERTY Property
FILTER Filter
QUERY Query
DIRECTEDGRAPH DirGraph
UNDIRECTEDGRAPH UndirGraph
VERTEX Vertex
EDGE Edge
PREDICATE Predicate
INTEGER [-+]?{DIGIT}+
FLOAT [-+]?{DIGIT}*(\.{DIGIT}+)
%option yylineno
%%
{COMMENT} return"<COMMENT>";
{SEMICOLON} return"<SEMICOLON>";
{COMMA} return"<COMMA>";
{DOT} return"<DOT>";
{COLON} return"<COLON>";
{ASSIGNMENT} return"<ASSIGNMENT>";
{COMPARISON} return"<COMPARISON>";
{GREATER} return"<GREATER>";
{LESS} return"<LESS>";
{GREATEREQUAL} return"<GREATEREQUAL>";
{LESSEQUAL} return"<LESSEQUAL>";
{NOTEQUAL} return"<NOTEQUAL>";
{NOT} return"<NOT>";
{VARIABLE} return"<VARIABLE>";
{PROPERTY} return"<PROPERTY>";
{FILTER} return"<FILTER>";
{QUERY} return"<QUERY>";
{DIRECTEDGRAPH} return"<DIRECTEDGRAPH>";
{UNDIRECTEDGRAPH} return"<UNDIRECTEDGRAPH>";
{VERTEX} return"<VERTEX>";
{EDGE} return"<EDGE>";
{PREDICATE} return"<PREDICATE>";
{INTEGER} return"<INTEGER>";
{FLOAT}	return"<FLOAT>";
{STRING} return"<STRING>";
{ADDITION} return"<PLUS>";
{SUBTRACTION} return"<SUBTRACTION>";
{MULTIPLICATION} return"<MULTIPLICATION>";
{LBRACKETS} return"<LBRACKETS>";
{RBRACKETS} return"<RBRACKETS>";
{LPARAN} return"<LBRACE>";
{RPARAN} return"<RBRACE>";
{CONCATENATION} return"<CONCATENATION>";
{ALTERNATION} return"<ALTERNATION>";
{DIVISION} return"<DIVISION>";
{REPETITION} return"<REPETITION>";
{IFSTM} return"<IF>";
{ELSEIF} return"<ELSEIF>";
{ELSE} return"<ELSE>";
{FOR} return"<FOR>";
{WHILE} return"<WHILE>";
{HASH} return"<HASH>";
{DOLAR} return"<DOLAR>";
{RANDVERT} return"<RANDVERTEX>";
{RANDEDGE} return"<RANDEDGE>";
{STRCONCAT} return"<STRCONCAT>";
{LSQR} return"<LSQRBRACE>";
{RSQL} return"<RSQRBRACE>";
{SPACE} return"<SPACE>";
{NEWLINE} return"<NEWLINE>";
. { yyerror("invalid character"); }
%%
int main(void){
	yylex();
	return 0;
}
